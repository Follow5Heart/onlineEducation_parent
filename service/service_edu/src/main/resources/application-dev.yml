application:
  version: v1.0.0

server:
  port: 8110 # 服务端口
  tomcat:
    max-threads: 10 #将tomcat的最大并发值修改为10，默认是200

spring:
  application:
    name: service-edu # 服务名
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/db_onlineedu_edu?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false
    username: root
    password: root

  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848 #nacos服务地址
    sentinel:
      transport:
        #port: 8721 #端口配置会在应用对应的机器上启动一个 Http Server，该 Server 会与 Sentinel 控制台做交互。比如 Sentinel 控制台添加了一个限流规则，会把规则数据 push 给这个 Http Server 接收，Http Server 再将规则注册到 Sentinel 中。
        dashboard: localhost:8040  #sentinel服务地址

  #Redis相关配置
  redis:
    host: localhost
    port: 6379
    password: ztyroot
    database: 0 #操作的是0号数据库
    # lettuce简单配置
    lettuce:
      pool:
        # 最大活跃链接数 默认8
        max-active: 100
        # 最大空闲连接数 默认8
        max-idle: 10
        # 最小空闲连接数 默认0
        min-idle: 0
#打印sql日志  可以在控制台查看sql语句的日志
mybatis:
#  configuration:
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    banner: off #关闭mybatis_plus的启动图标
  mapper-locations: classpath*:com/zty/onlineedu/**/mapper/maps/*.xml,classpath*:com/zty/onlineedu/**/mapper/*/*.xml #配置mapper xml文件的路径

# 控制日志输出自定义，并且MyBatis日志关闭查询结果输出保留SQL输出
logging:
  config: classpath:logback-custom.xml
  level:
    com.zty: debug
    org.springframework: error
    com.baomidou: debug
    org.springframework.jdbc.datasource.init: debug
    springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator: warn
    org.apache.ibatis: debug
    java.sql: debug
    org.apache.tomcat.util.scan.StandardJarScanner: error #扫描包只输出error日志
  #使用 logging.file.path= 文件名  //直接在跟目录下创建该文件且自动 帮你创建好 spring.log 文件
  file:
    path: springbootLogs


#nacos是自带Ribbon的。Spring Cloud Ribbon是一个基于HTTP和TCP的客户端负载均衡工具，
#它基于Netflix Ribbon实现。通过Spring Cloud的封装，
#可以让我们轻松地将面向服务的REST模版请求自动转换成客户端负载均衡的服务调用。
#nacos封装好的负载均衡默认是轮询策略，（你一次我一次）
#service-file:  #这里是服务提供方的名称
#  ribbon:
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #设置为随机策略


ribbon:
  MaxAutoRetries: 1  #针对当前发给提供方的服务，最大重试次数，不包括首次调用，默认为0，意思就是如果第一次调用远程微服务失败后，会在发一次，还是同一个实例（同一个服务ip,端口都一样）
  MaxAutoRetriesNextServer: 1 #重试其他实例的最大重试次数，不包括首次所选的server,默认为1  就是如果远程调用失败了，会调用下一个server，如果只有一个，那么下一个server就还是它
  ConnectTimeout: 5000 # 连接建立的超时时长，默认为1秒 这里设置为5秒
  ReadTimeout: 5000 #处理请求的超时时常，默认为1秒  这里设置为5秒

# 开启feign对sentinel的支持  如果edu调用file服务，如果file报错，那么要对edu进行熔断保护
feign:
  sentinel:
    enabled: true